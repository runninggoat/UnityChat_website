{"version":3,"sources":["store.js","ContactList/contact_list.js","Chat/chat.js","Setting/abi.js","Setting/setting.js","home.js","App.js","serviceWorker.js","index.js"],"names":["UPDATE_GLOBAL","UPDATE_NICKNAME","PUSH_MESSAGES","defaultGlobal","nickname","contacts","wallet","contract","chats","rootReducer","combineReducers","global","state","arguments","length","undefined","action","type","g","Object","assign","key","value","i","address","name","messages","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","Header","Content","ContactList","showModal","newAddr","this","setState","props","handleDisplay","DISPLAY_CHAT","_this2","react_default","a","createElement","className","modal","title","visible","onOk","handleOk","bind","onCancel","handleCancel","input","placeholder","onChange","e","target","layout","row","justify","col","span","onClick","DISPLAY_SETT","list","itemLayout","dataSource","renderItem","item","Item","align","icon","substring","es_button","shape","Component","Chat_","loading","text","requestNickname","requestMessages","getNickname","catch","err","message","error","DISPLAY_LIST","then","updateNickname","_this3","forced","getContacts","c","map","addr","set","_this4","console","log","getChatHistory","history","m","attr","MESSAGE_SELF","MESSAGE_OPPO","content","pushMessages","forceUpdate","push","style","float","_this5","sendMessage","tx","hash","wait","requestContacts","_this6","renderMessages","tip","chat_Header","offset","chat_Content","TextArea","disabled","maxLength","textAlign","Chat","connect","ownProps","dispatch","abi","constant","inputs","outputs","payable","stateMutability","anonymous","indexed","components","PrivateKeyInput","privateKey","signin","gutter","prefix","loginWallet","NicknameInput","editing","Setting_","provider","ethers","providers","JsonRpcProvider","Wallet","contractWithSigner","Contract","controller","setting_NicknameInput","_nickname","_this7","_this8","btn","margin","width","_this9","info","_this10","renderNicknameController","refreshContactBtn","renderRefreshContacts","setting_Header","setting_Content","setting_PrivateKeyInput","readOnly","Setting","Home_","display","nameMap","setTimeout","changed","ContactList_contact_list","processNameMapping","Chat_chat","Setting_setting","switchDisplay","Home","App","es","BrowserRouter","Route","exact","path","component","Boolean","location","hostname","match","renderRoot","ReactDOM","render","src_App","document","getElementById","addEventListener","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6568e910.chunk.js","sourcesContent":["import { createStore, combineReducers } from 'redux'\n\nexport const UPDATE_GLOBAL = 'update_global'\nexport const UPDATE_NICKNAME = 'update_nickname'\nexport const PUSH_MESSAGES = 'push_chat'\n\n// 定义默认值\nconst defaultGlobal = {\n  nickname: '',\n  contacts: [],\n  wallet: null,\n  contract: null,\n  chats: {},\n}\n\nfunction global(state = defaultGlobal, action) {\n  switch (action.type) {\n    case UPDATE_GLOBAL: {\n      let g = Object.assign({}, state)\n      g[action.key] = action.value\n      return g\n    }\n    case UPDATE_NICKNAME: {\n      let g = Object.assign({}, state)\n      for (let i = 0; i < g.contacts.length; i++) {\n        if (g.contacts[i].address === action.address) {\n          g.contacts[i].name = action.name\n        }\n      }\n      return g\n    }\n    case PUSH_MESSAGES: {\n      let g = Object.assign({}, state)\n      g.chats[action.address] = action.messages\n      return g\n    }\n    default:\n      return state\n  }\n}\n\n// 将不同的reducer合到一起，一个应用只能产生一个store\nconst rootReducer = combineReducers({\n  global,\n})\n\n// 创建 Redux store 来存放应用的状态。\n// API 是 { subscribe, dispatch, getState }。\nlet store = createStore(\n  rootReducer,\n  // 下面这个用于Chrome的redux插件debug\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n)\n\nexport default store\n","import React, { Component } from 'react'\nimport { Layout, Row, Col, List, Icon, Button, Modal, Input } from 'antd'\nimport './contact_list.css'\nimport { DISPLAY_CHAT, DISPLAY_SETT } from '../home'\n\nconst {\n  Header, Content,\n} = Layout\n\nclass ContactList extends Component {\n  state = {\n    showModal: false,\n    newAddr: '',\n  }\n\n  handleOk () {\n    this.setState({\n      showModal: false,\n    })\n    this.props.handleDisplay(DISPLAY_CHAT, this.state.newAddr)\n  }\n\n  handleCancel () {\n    this.setState({\n      showModal: false,\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"contac-list\">\n        <Modal\n          title='Chat with ...'\n          visible={ this.state.showModal }\n          onOk={ this.handleOk.bind(this) }\n          onCancel={ this.handleCancel.bind(this) }\n        >\n          <Input\n            placeholder='Other Ethereum address'\n            value={ this.state.newAddr }\n            onChange={ e => {\n              const { value } = e.target\n              this.setState({ newAddr: value })\n            } }\n          />\n        </Modal>\n        <Layout>\n          <Header className='header'>\n            <Row justify='start'>\n              <Col span={5} className='sub2'>Contacts</Col>\n              <Col span={14} className='sub1'>UnityChat</Col>\n              <Col span={5} className='sub2' onClick={ () => {this.props.handleDisplay(DISPLAY_SETT)} }>Settings</Col>\n            </Row>\n          </Header>\n          <Content className='content'>\n            <List\n              itemLayout='horizontal'\n              dataSource={ this.props.contacts }\n              renderItem={item => (\n                <List.Item\n                  onClick={() => {\n                    this.props.handleDisplay(DISPLAY_CHAT, item.address)\n                  }}\n                >\n                  <Row justify='start' align='middle'>\n                    <Col span={4}>\n                      <Icon type='user' />\n                    </Col>\n                    <Col span={7}>\n                      <span>{ item.name.length > 4 ? item.name.substring(0, 4) + '...' : item.name }</span>\n                    </Col>\n                    <Col span={13}>\n                      <span>{ item.address.substring(0, 8) + '...' + item.address.substring(36) }</span>\n                    </Col>\n                  </Row>\n                </List.Item>\n              )}\n            ></List>\n            <Button\n              className='add-contact'\n              type='primary'\n              shape='circle'\n              icon='plus'\n              onClick={ () => {this.setState({ showModal: true })} }\n            />\n          </Content>\n        </Layout>\n      </div>\n    )\n  }\n}\n\nexport default ContactList\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Layout, Row, Col, Icon, message, Input, Button } from 'antd'\nimport './chat.css'\nimport { DISPLAY_LIST, MESSAGE_OPPO, MESSAGE_SELF } from '../home'\nimport { UPDATE_GLOBAL, UPDATE_NICKNAME, PUSH_MESSAGES } from '../store'\n\nconst {\n  Header, Content,\n} = Layout\n\nclass Chat_ extends Component {\n  state = {\n    loading: false,\n    text: '',\n    nickname: '', // opponent's nickname\n  }\n\n  componentDidMount () {\n    this.requestNickname()\n    this.requestMessages()\n  }\n\n  requestNickname () {\n    // If nickname has already been retrived\n    let contacts = this.props.global.contacts\n    for (let i = 0; i < contacts.length; i++) {\n      if (contacts[i].address === this.props.address) {\n        if (contacts[i].name.length > 0) {\n          this.setState({\n            nickname: contacts[i].name,\n          })\n          return\n        }\n      }\n    }\n\n    // Otherwise, request from Ethereum\n    this.props.global.contract.getNickname(this.props.address).catch(err =>{\n      message.error('Please provide valid address')\n      this.props.handleDisplay(DISPLAY_LIST)\n      return\n    }).then(nickname => {\n      this.setState({\n        nickname: nickname,\n      })\n      this.props.updateNickname(this.props.address, nickname)\n    })\n  }\n\n  requestContacts (forced = false) {\n    if (this.props.global.contacts.length > 0 && !forced) return\n    this.setState({\n      loading: true,\n    })\n    this.props.global.contract.getContacts().catch(err => {\n      message.error('Fail to retrive data')\n    }).then(contacts => {\n      this.setState({\n        loading: false,\n      })\n      if (!contacts) {\n        message.error('Fail to retrive data')\n        return\n      }\n      let c = contacts.map(addr => {\n        let name = '', contacts = this.props.global.contacts\n        for (let i = 0; i < contacts.length; i++) {\n          if (addr === contacts[i].address) {\n            name = contacts[i].name\n            break\n          }\n        }\n        return {\n          name: name,\n          address: addr,\n        }\n      })\n      this.props.set('contacts', c)\n    })\n  }\n\n  requestMessages (forced = false) {\n    if (this.props.global.chats[this.props.address] && !forced) return\n    console.log('request messages for chat with address', this.props.address)\n    this.props.global.contract.getChatHistory(this.props.address).catch(err => {\n      message.error('Fail to retrive data')\n    }).then(history => {\n      if (!history) {\n        message.error('Please provide valid address')\n        this.props.handleDisplay(DISPLAY_LIST)\n        return\n      }\n      let messages = history.map((m) => {\n        return {\n          type: m.attr === 0 ? MESSAGE_SELF : MESSAGE_OPPO,\n          content: m.content,\n        }\n      })\n      this.props.pushMessages(this.props.address, messages)\n      this.forceUpdate()\n    })\n  }\n\n  renderMessages () {\n    let messages = []\n    let m = this.props.global.chats[this.props.address]\n    for (let i = 0; i < m.length; i++) {\n      switch (m[i].type) {\n        case MESSAGE_OPPO: {\n          messages.push((\n            <Row justify='start' key={ i } className='message'>\n              <Col span={3}>\n                <div className='avatar'>{ this.state.nickname ? this.state.nickname.substring(0, 1) : 'X' }</div>\n              </Col>\n              <Col span={21}>\n                <div className='left-tip'></div>\n                <div className='cont'>{ m[i].content }</div>\n              </Col>\n            </Row>\n          ))\n          break\n        }\n        case MESSAGE_SELF: {\n          messages.push((\n            <Row justify='end' key={ i } className='message'>\n              <Col span={21}>\n                <div className='cont'>{ m[i].content }</div>\n                <div className='right-tip'></div>\n              </Col>\n              <Col span={3}>\n                <div className='avatar' style={{ float: 'right' }}>{ this.props.global.nickname ? this.props.global.nickname.substring(0, 1) : 'Y' }</div>\n              </Col>\n            </Row>\n          ))\n          break\n        }\n        default: break\n      }\n    }\n    if (messages.length < 1) messages = null\n    return (\n      <div>\n        { messages }\n        <div className='place-occupation'></div>\n      </div>\n    )\n  }\n\n  sendMessage () {\n    this.setState({\n      loading: true,\n    })\n    this.props.global.contract.sendMessage(this.props.address, this.state.text).catch(err => {\n      message.error('Connection loss, please refresh page')\n    }).then(tx => {\n      console.log('send message', 'https://ropsten.etherscan.io/tx/' + tx.hash)\n      tx.wait().catch(err => {\n        message.error(err)\n        this.setState({\n          loading: false,\n        })\n      }).then(e => {\n        console.log('Refresh messages ...')\n        this.requestMessages(true)\n        this.requestContacts(true)\n        this.setState({\n          loading: false,\n          text: '',\n        })\n      })\n    })\n  }\n\n  render () {\n    let messages = null\n    if (this.props.global.chats[this.props.address]) {\n      messages = this.renderMessages()\n    }\n    let tip = null\n    if (this.state.loading) {\n      tip = (<div>Sending...</div>)\n    }\n    return (\n      <div className=\"chat\">\n        <Layout>\n          <Header className='header'>\n            <Row justify='start'>\n              <Col span={2} onClick={ () => {if (!this.state.loading) this.props.handleDisplay(DISPLAY_LIST)} }>\n                <Icon type='left' className='goback' />\n              </Col>\n              <Col span={12} className='opponent'>{ this.state.nickname ? this.state.nickname : 'Stranger' }</Col>\n              <Col offset={8} span={2} onClick={ () => this.requestMessages(true) }>\n                <Icon type='sync' className='sync' />\n              </Col>\n            </Row>\n          </Header>\n          <Content className='content'>\n            { messages }\n            <div className='bottom-sender'>\n              <Row justify='start'>\n                <Col span={20}>\n                  <Input.TextArea\n                    disabled={ this.state.loading }\n                    placeholder='Your message ...'\n                    maxLength='200'\n                    value={ this.state.text }\n                    onChange={ e => {\n                      const {value} = e.target\n                      this.setState({ text: value })\n                    } }\n                  />\n                </Col>\n                <Col span={4} style={{ textAlign: 'center' }}>\n                  <Button\n                    disabled={ this.state.loading }\n                    type='primary'\n                    shape='circle'\n                    icon='mail'\n                    onClick={ () => {this.sendMessage()} }\n                  />\n                  { tip }\n                </Col>\n              </Row>\n            </div>\n          </Content>\n        </Layout>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    global: state.global,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    set: (key, value) => {\n      dispatch({\n        type: UPDATE_GLOBAL,\n        key: key,\n        value: value,\n      })\n    },\n    updateNickname: (address, name) => {\n      dispatch({\n        type: UPDATE_NICKNAME,\n        address: address,\n        name: name,\n      })\n    },\n    pushMessages: (address, messages) => {\n      dispatch({\n        type: PUSH_MESSAGES,\n        address: address,\n        messages: messages,\n      })\n    },\n  }\n}\n\nconst Chat = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Chat_)\n\nexport default Chat\n","const abi = [\n  {\n    \"constant\": false,\n    \"inputs\": [],\n    \"name\": \"close\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"_message\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"sendMessage\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_nickname\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"updateNickname\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"fallback\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"name\": \"_from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"MsgSent\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"name\": \"_addr\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"NickModify\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"name\": \"_log\",\n        \"type\": \"bytes\"\n      }\n    ],\n    \"name\": \"log_string\",\n    \"type\": \"event\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [\n      {\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"getChatHistory\",\n    \"outputs\": [\n      {\n        \"components\": [\n          {\n            \"name\": \"attr\",\n            \"type\": \"uint8\"\n          },\n          {\n            \"name\": \"content\",\n            \"type\": \"string\"\n          }\n        ],\n        \"name\": \"\",\n        \"type\": \"tuple[]\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"getContacts\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address[]\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [\n      {\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"getNickname\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n]\n\nexport default abi\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Layout, Row, Col, Icon, Input, Button, message } from 'antd'\nimport { ethers } from 'ethers'\nimport './setting.css'\nimport { DISPLAY_LIST } from '../home'\nimport { UPDATE_GLOBAL } from '../store'\nimport abi from './abi'\n\nclass PrivateKeyInput extends Component {\n  state = {\n    privateKey: '',\n  }\n\n  renderItem () {\n    let item = null\n    if (this.props.signin) {\n      item = (\n        <Row\n          justify='start'\n          gutter={4}\n        >\n          <Col span={24} style={{ textAlign: 'left' }}>\n            <div className='wallet'>Wallet: { this.props.global && this.props.global.wallet ? this.props.global.wallet.address : '' }</div>\n          </Col>\n        </Row>\n      )\n    } else {\n      item = (\n        <Row\n          justify='start'\n          gutter={4}\n        >\n          <Col span={24} style={{ textAlign: 'left' }}>Sgin in with private key</Col>\n          <Col span={22}>\n            <Input\n              prefix={<Icon type='key' />}\n              placeholder='Your private key'\n              value={ this.state.privateKey }\n              onChange={ (e) => {\n                const { value } = e.target\n                this.setState({ privateKey: value })\n              } }\n            />\n          </Col>\n          <Col span={2} style={{ textAlign: 'center' }}>\n            <Button\n              type=\"primary\"\n              shape=\"circle\"\n              icon='check'\n              onClick={ () => {this.props.loginWallet(this.state.privateKey)} }\n            />\n          </Col>\n        </Row>\n      )\n    }\n    return item\n  }\n\n  render () {\n    let item = this.renderItem()\n    return (\n      <div>{ item }</div>\n    )\n  }\n}\n\nclass NicknameInput extends Component {\n  state = {\n    editing: false,\n    nickname: '',\n  }\n\n  renderItem () {\n    let item = null\n    if (this.state.editing) {\n      item = (\n        <Row\n          justify='start'\n          gutter={4}\n        >\n          <Col span={24} style={{ textAlign: 'left' }}>Edit your nickname</Col>\n          <Col span={19}>\n            <Input\n              prefix={<Icon type='user' />}\n              placeholder='Your nickname'\n              value={ this.state.nickname }\n              onChange={ (e) => {\n                const { value } = e.target\n                this.setState({ nickname: value })\n              } }\n            />\n          </Col>\n          <Col span={5} style={{ textAlign: 'center' }}>\n            <Button\n              type=\"primary\"\n              shape=\"circle\"\n              icon='check'\n              onClick={ () => {this.props.updateNickname(this.state.nickname); this.setState({ editing: false })} }\n            />\n            <Button\n              type=\"danger\"\n              shape=\"circle\"\n              icon='close'\n              onClick={ () => {this.setState({ editing: false })} }\n            />\n          </Col>\n        </Row>\n      )\n    } else {\n      item = (\n        <Row\n          justify='start'\n          gutter={4}\n        >\n          <Col span={24} style={{ textAlign: 'left' }}>\n            <Row\n              justify='start'\n              className='nickname'\n            >\n              <Col span={22} style={{ textAlign: 'left' }}>\n                <div>Nickname: { this.props.global ? this.props.global.nickname : '' }</div>\n              </Col>\n              <Col span={2} style={{ textAlign: 'right' }}>\n                <Button\n                  disabled={ this.props.loading }\n                  type=\"primary\"\n                  shape=\"circle\"\n                  icon='edit'\n                  onClick={ () => {this.setState({ editing: true })} }\n                />\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      )\n    }\n    return item\n  }\n\n  render () {\n    let item = this.renderItem()\n    return (\n      <div>{ item }</div>\n    )\n  }\n}\n\nconst {\n  Header, Content,\n} = Layout\n\nclass Setting_ extends Component {\n  state = {\n    signin: false,\n    loading: false,\n  }\n\n  componentDidMount () {\n    if (this.props.global.wallet) {\n      this.setState({\n        signin: true,\n      })\n    }\n  }\n\n  loginWallet (privateKey) {\n    // Init provider\n    let providerUrl = 'https://ropsten.infura.io/v3/9587616e1d9c4c44a3f3f957d721e15e'\n    let provider = new ethers.providers.JsonRpcProvider(providerUrl)\n\n    // Init wallet\n    let wallet\n    try {\n      wallet = new ethers.Wallet(privateKey, provider)\n    } catch (e) {\n      message.error('Please provide valid private key')\n      return\n    }\n    this.props.set('wallet', wallet)\n\n    // Init contract\n    let contractAddress = '0x127c08af8ce6e7fae914efeeb35398f2a9479c39'\n    let contract = new ethers.Contract(contractAddress, abi, provider)\n    let contractWithSigner = contract.connect(wallet)\n    this.props.set('contract', contractWithSigner)\n\n    // Init nickname\n    this.setState({\n      loading: true,\n    })\n    contractWithSigner.getNickname(wallet.address).catch(err => {\n      message.error('Connection loss, please refresh page')\n    }).then(nickname => {\n      this.props.set('nickname', nickname)\n      this.setState({\n        loading: false,\n      })\n    })\n\n    // Init contacts\n    contractWithSigner.getContacts().catch(err => {\n      message.error('Connection loss, please refresh page')\n    }).then(contacts => {\n      if (!contacts) {\n        message.error('Connection loss, please refresh page')\n        return\n      }\n      console.log(contacts)\n      let c = contacts.map(addr => {\n        return {\n          name: '',\n          address: addr,\n        }\n      })\n      this.props.set('contacts', c)\n    })\n\n    // Finish signing in\n    this.setState({\n      signin: true,\n    })\n  }\n\n  renderNicknameController () {\n    let controller = null\n    if (this.state.signin) {\n      controller = (\n        <NicknameInput\n          loading={ this.state.loading }\n          global={this.props.global}\n          updateNickname={ this.updateNickname.bind(this) }\n        />\n      )\n    }\n    return controller\n  }\n\n  updateNickname (_nickname) {\n    this.setState({\n      loading: true,\n    })\n    this.props.global.contract.updateNickname(_nickname).catch(err => {\n      message.error('Connection loss, please refresh page')\n    }).then(tx => {\n      console.log('update nickname', 'https://ropsten.etherscan.io/tx/' + tx.hash)\n      tx.wait().catch(err => {\n        message.error(err)\n        this.setState({\n          loading: false,\n        })\n      }).then(e => {\n        this.props.global.contract.getNickname(this.props.global.wallet.address).catch(err => {\n          message.error('Connection loss, please refresh page')\n        }).then(nickname => {\n          this.props.set('nickname', nickname)\n          this.setState({\n            loading: false,\n          })\n        })\n      })\n    })\n  }\n\n  renderRefreshContacts () {\n    let btn = null\n    if (this.state.signin) {\n      btn = (\n        <Row justify='center' style={{ margin: '5px 0' }}>\n          <Col span={24}>\n            <Button\n              disabled={ this.state.loading }\n              type=\"primary\"\n              onClick={ () => {this.requestContacts(true)} }\n              style={{ width: '100%' }}\n            >Refresh contacts</Button>\n          </Col>\n        </Row>\n      )\n    }\n    return btn\n  }\n\n  requestContacts (forced = false) {\n    if (this.props.global.contacts.length > 0 && !forced) return\n    this.setState({\n      loading: true,\n    })\n    this.props.global.contract.getContacts().catch(err => {\n      message.error('Connection loss, please refresh page')\n    }).then(contacts => {\n      this.setState({\n        loading: false,\n      })\n      if (!contacts) {\n        message.error('Connection loss, please refresh page')\n        return\n      }\n      let c = contacts.map(addr => {\n        let name = '', contacts = this.props.global.contacts\n        for (let i = 0; i < contacts.length; i++) {\n          if (addr === contacts[i].address) {\n            name = contacts[i].name\n            break\n          }\n        }\n        return {\n          name: name,\n          address: addr,\n        }\n      })\n      this.props.set('contacts', c)\n      message.info('Refresh contacts successfully')\n    })\n  }\n\n  render () {\n    let nickname = this.renderNicknameController()\n    let refreshContactBtn = this.renderRefreshContacts()\n    return (\n      <div className=\"setting\">\n        <Layout>\n          <Header className='header'>\n            <Row justify='start'>\n              <Col span={2} onClick={ () => {if (!this.state.loading) this.props.handleDisplay(DISPLAY_LIST)} }>\n                <Icon type='left' className='goback' />\n              </Col>\n              <Col span={12} className='title'>Settings</Col>\n            </Row>\n          </Header>\n          <Content className='content'>\n            <PrivateKeyInput\n              signin={ this.state.signin }\n              global={ this.props.global }\n              loginWallet={ this.loginWallet.bind(this) }\n            />\n            { nickname }\n            { refreshContactBtn }\n            <Row justify='center' style={{ margin: '5px 0' }}>\n              <Col span={24} style={{ textAlign: 'left' }}>\n                <span>Test private key 1</span>\n              </Col>\n              <Col span={24}>\n                <Input\n                  readOnly={ true }\n                  value={ '5673F90E7755590D098B57867459BAC033B588CE083C3CD87C8B5EBE7C5032F7' }\n                />\n              </Col>\n            </Row>\n            <Row justify='center' style={{ margin: '5px 0' }}>\n              <Col span={24} style={{ textAlign: 'left' }}>\n                <span>Test private key 2</span>\n              </Col>\n              <Col span={24}>\n                <Input\n                  readOnly={ true }\n                  value={ '76F0CE5A1FBC853FBFDE9DF93BE00A032AD833434D89C96D71CBA5616E36D9CA' }\n                />\n              </Col>\n            </Row>\n          </Content>\n        </Layout>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    global: state.global,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    set: (key, value) => {\n      dispatch({\n        type: UPDATE_GLOBAL,\n        key: key,\n        value: value,\n      })\n    },\n  }\n}\n\nconst Setting = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Setting_)\n\nexport default Setting\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { message } from 'antd'\nimport ContactList from './ContactList/contact_list'\nimport Chat from './Chat/chat'\nimport Setting from './Setting/setting'\nimport { UPDATE_GLOBAL, PUSH_MESSAGES } from './store'\n\nexport const DISPLAY_LIST = 'contact_list'\nexport const DISPLAY_CHAT = 'chat_room'\nexport const DISPLAY_SETT = 'settings'\nexport const MESSAGE_OPPO = 'message_oppo'\nexport const MESSAGE_SELF = 'message_self'\n\nclass Home_ extends Component {\n  state = {\n    display: DISPLAY_LIST,\n    address: '',\n    nameMap: {},\n  }\n\n  componentDidMount () {\n    // If private key is not provided, then go to settings and ask user to provide private key\n    if (!this.props.global.wallet) {\n      message.info('Please login with your private key')\n      setTimeout(() => {\n        this.setState({\n          display: DISPLAY_SETT,\n        })\n      }, 2000)\n    }\n  }\n\n  processNameMapping (contacts) {\n    let nameMap = Object.assign({}, this.state.nameMap)\n    let changed = false\n    for (let i = 0; i < contacts.length; i++) {\n      if (nameMap[contacts[i].address] === contacts[i].name) continue\n      nameMap[contacts[i].address] = contacts[i].name\n      changed = true\n    }\n    if (changed) {\n      this.setState({\n        nameMap: nameMap,\n      })\n    }\n  }\n\n  handleDisplay (display, address=null) {\n    if (address) {\n      this.setState({\n        display: display,\n        address: address,\n      })\n    } else {\n      this.setState({\n        display: display,\n      })\n    }\n  }\n\n  switchDisplay () {\n    let display = null\n    switch (this.state.display) {\n      case DISPLAY_LIST: {\n        display = (\n          <ContactList\n            contacts={ this.props.global.contacts }\n            handleDisplay={ this.handleDisplay.bind(this) }\n          />\n        )\n        setTimeout(() => {this.processNameMapping(this.props.global.contacts)}, 300)\n        break\n      }\n      case DISPLAY_CHAT: {\n        display = (\n          <Chat\n            address={ this.state.address }\n            nickname={ this.state.nameMap[this.state.address] }\n            handleDisplay={ this.handleDisplay.bind(this) }\n          />\n        )\n        break\n      }\n      case DISPLAY_SETT: {\n        display = (\n          <Setting\n            handleDisplay={ this.handleDisplay.bind(this) }\n          />\n        )\n        break\n      }\n      default: break\n    }\n    return display\n  }\n\n  render () {\n    let display = this.switchDisplay()\n    return (\n      <div>\n        { display }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    global: state.global,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    set: (key, value) => {\n      dispatch({\n        type: UPDATE_GLOBAL,\n        key: key,\n        value: value,\n      })\n    },\n    pushMessages: (address, messages) => {\n      dispatch({\n        type: PUSH_MESSAGES,\n        address: address,\n        messages: messages,\n      })\n    },\n  }\n}\n\nconst Home = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Home_)\n\nexport default Home\n","import React, { Component } from 'react'\nimport { Route, BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport Home from './home'\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <div>\n            <Route exact path=\"/\" component={Home} />\n          </div>\n        </BrowserRouter>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nfunction renderRoot () {\n  ReactDOM.render(<App />, document.getElementById('root'))\n}\n\nrenderRoot()\n\nwindow.addEventListener('resize', renderRoot)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}